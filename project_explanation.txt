# Project Timeline App Explanation

This document outlines the "Project Timeline App," a Flutter-based application designed for managing projects and tasks with a focus on timeline visualization and progress tracking.

## Tech Stack:
*   **Framework**: Flutter
*   **Language**: Dart
*   **State Management**: Riverpod
*   **Database**: SQLite (via `sqflite` for local persistence)
*   **UI/UX Libraries**: `table_calendar`, `percent_indicator`, `google_fonts`, `animations`, `lottie`, `flutter_staggered_grid_view`, `lucide_icons`
*   **Utility Libraries**: `pdf`, `uuid`

## Core Features:

1.  **Project Management**:
    *   **Creation and Management**: Users can create new projects, providing details such as title, description, start date, end date, and assigned team members.
    *   **Overview**: The `ProjectsScreen` likely provides a list or grid view of all active projects.
    *   **Forms**: `ProjectFormScreen` suggests dedicated forms for adding or editing project details.

2.  **Task Management**:
    *   **Task Assignment**: Tasks can be created and assigned to specific projects and team members.
    *   **Status Tracking**: Each task has a status (e.g., `notStarted`, `inProgress`, `completed`) and a progress indicator (0.0 to 1.0).
    *   **Timeline Integration**: Tasks are associated with start and end dates, enabling timeline visualization.

3.  **Dashboard View (`DashboardScreen`)**:
    *   Provides an overview of ongoing projects and tasks.
    *   Likely integrates `table_calendar` for a calendar-based view of deadlines and milestones.
    *   Uses `percent_indicator` to display project and task progress visually.
    *   May utilize `flutter_staggered_grid_view` for a dynamic and appealing layout of project summaries or key metrics.

4.  **User Profiles (`ProfileScreen`)**:
    *   Allows users to manage their profiles or view tasks assigned to them.
    *   Could potentially show personal task timelines or performance metrics.

5.  **Data Persistence**:
    *   Uses `sqflite` for local database storage, ensuring that project and task data is saved persistently across app sessions.
    *   Supports both web and native platforms for database operations.

6.  **Rich User Interface (UI/UX)**:
    *   **Theming**: Features a modern design with `GoogleFonts` (Poppins) and supports system-wide dark mode.
    *   **Animations**: Incorporates `animations` and `lottie` for smooth transitions and engaging visual feedback.
    *   **Icons**: Utilizes `lucide_icons` for a consistent and modern icon set.

7.  **PDF Export**:
    *   The `pdf` dependency indicates the capability to generate and export project reports or timelines in PDF format.

8.  **State Management**:
    *   Leverages `flutter_riverpod` for efficient and reactive state management throughout the application.

## Project Timeline and Architecture:

The application is structured around a clear separation of concerns:

*   **`models/`**: Defines data structures for `Project` and `Task`, including their properties and methods.
*   **`services/`**: Handles data operations, including `DatabaseService` for `sqflite` interactions, `ProjectRepository`, and `TaskRepository` for managing project and task data.
*   **`providers/`**: Contains `flutter_riverpod` providers (`ProjectProvider`, `TaskProvider`) to expose and manage application state to the UI.
*   **`screens/`**: Houses the main UI components for different sections of the app (`DashboardScreen`, `ProjectsScreen`, `ProfileScreen`, `ProjectFormScreen`).
*   **`main.dart`**: The entry point, responsible for app initialization, database setup, dummy data preloading, and overall app routing/theming.

The `_preloadDummyData` function in `main.dart` demonstrates the typical lifecycle of projects and tasks, from creation to completion, showcasing how the app manages different statuses and progress levels over time. This function effectively illustrates the "timeline" aspect by setting various start and end dates for projects and tasks, some in the past, some current, and some in the future.

The app's architecture is designed to be scalable and maintainable, using modern Flutter practices and state management patterns to deliver a robust project timeline experience.
